// Every commented-out export is re-exported by another file...

export {
  alt as Alt,
  alternative as Alternative,
  applicative as Applicative,
  apply as Apply,
  // array as Array,
  bifunctor as Bifunctor,
  booleanAlgebra as BooleanAlgebra,
  bounded as Bounded,
  boundedDistributiveLattice as BoundedDistributiveLattice,
  boundedJoinSemilattice as BoundedJoinSemilattice,
  boundedLattice as BoundedLattice,
  boundedMeetSemilattice as BoundedMeetSemilattice,
  category as Category,
  chain as Chain,
  chainRec as ChainRec,
  choice as Choice,
  comonad as Comonad,
  console as Console,
  const as Const,
  contravariant as Contravariant,
  date as Date,
  distributiveLattice as DistributiveLattice,
  // either as Either,
  eitherT as EitherT,
  eq as Eq,
  exception as Exception,
  extend as Extend,
  field as Field,
  filterable as Filterable,
  filterableWithIndex as FilterableWithIndex,
  foldable as Foldable,
  foldable2v as Foldable2v,
  foldableWithIndex as FoldableWithIndex,
  free as Free,
  freeGroup as FreeGroup,
  function as Fn,
  functor as Functor,
  functorWithIndex as FunctorWithIndex,
  group as Group,
  heytingAlgebra as HeytingAlgebra,
  hkt as HKT,
  identity as Identity,
  invariant as Invariant,
  io as IO,
  ioEither as IOEither,
  ioRef as IORef,
  ixIO as IxIO,
  ixMonad as IxMonad,
  joinSemilattice as JoinSemilattice,
  lattice as Lattice,
  map as Map,
  meetSemilattice as MeetSemilattice,
  monad as Monad,
  monadIO as MonadIO,
  monadTask as MonadTask,
  monoid as Monoid,
  monoidal as Monoidal,
  nonEmptyArray as NonEmptyArray,
  // option as Option,
  optionT as OptionT,
  ord as Ord,
  ordering as Ordering,
  pair as Pair,
  plus as Plus,
  profunctor as Profunctor,
  random as Random,
  reader as Reader,
  readerT as ReaderT,
  readerTaskEither as ReaderTaskEither,
  record as Record,
  ring as Ring,
  semigroup as Semigroup,
  semigroupoid as Semigroupoid,
  semiring as Semiring,
  set as Set,
  setoid as Setoid,
  state as State,
  stateT as StateT,
  store as Store,
  strmap as StrMap,
  strong as Strong,
  task as Task,
  // taskEither as TaskEither,
  // these as These,
  trace as Trace,
  traversable as Traversable,
  traversable2v as Traversable2v,
  traversableWithIndex as TraversableWithIndex,
  tree as Tree,
  tuple as Tuple,
  unfoldable as Unfoldable,
  validation as Validation,
  writer as Writer,
  compactable as Compactable,
  witherable as Witherable,
  zipper as Zipper
} from "fp-ts";
